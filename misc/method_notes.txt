2.1

	Code und Daten bei Chris
	Link für Virusparies. Erwähnen, dass im Rahmen der Masterarbeit ein R package erstellt wurde.
	Pipeline für Downstream Analyse bei Chris.

2.2


	Tabelle an Dependencies und ihre Fassung auflisten.
	Erwähnen, dass es auf Aeternitas lief.
	Multi Threaded -> 6 Threads.
	Erwähne, dass virusHunterGatherer auf Aeternitas installiert war
	Erwähnen, dass VirusHunterGatherer in Perl umgesetzte wurde
	Aber es ist mit Snakemake aufrugfbar, was Python basiert ist. Erläre, dass es dann Regeln entsprechen in einer bestimmten Reihenfolge gemacht wird.
	Erwähnen, dass es einen Config-File gibt. Kurz erkären, was im Config File angegeben wird: Die Paths zu den Filter Datenbanken, Paths zu den Input Daten. Erklären, dass leere Stirngs für SRA lokale Daten nutzt. Das mann damit angeben kann, dass Filter 2 optional wird. Definiert Struktur für Output Path.
	Link zu VirusHunterGatherer
	Link zu Virusparies.

2.4.1

	Erwähnen, dass im Falle, wo SRA Dateien und nicht lokale Dateien benutzt werden, SRAs heruntergeladen und über fastqdump in FASTq konvertiert werden.
	Erwähnen, falls keine SRA-Dateien liste als txt im Config_file angegeben ist (leerer String), dass dann von lokalen FASTQ Files ausgegangen wird.

2.4.2

Default values used for the rest. Vielleicht Default Werte doch nennen?
Quality control and preprocessing was performed using fastp implemented in VirusHunter.
Takes fastq files as input.

?   if ( $r1id eq $r2id ){
                $fastp_cmd .= " --interleaved_in --stdout > $resdir/$sraid.trim.fastq";
        }else{
                $fastp_cmd .= " -o $resdir/$sraid.trim.fastq";
        }
indicate that <in1> is an interleaved FASTQ which contains both read1 and read2.

Json and html report files are generatedand a trimmed fastq file. 
	Input erwähnen: SRA Daten oder locale FASTQ-Daten
	Erwähnen, dass FASTQ Dateien transformiert werden zu FASTA
	Preprocessing: Fastp als Qaulitätskontrolle, Translation der Sequenzen und Aufspaltung in 6 frames
	Genutzte Parameter erwähnen.

2.4.4

	Parameter für Filter 1 und 3 erklären.
	Erklären, woraus Filter 1 besteht (Ubiquitin C).
	Erwähnen,dass Filter 2 übersprungen wurde und warum.
	Duplikate entfernt mit vsearch. Paramater erwähnen.

2.4.5

	Hittable und andere Dateien erwähnen.
	Logs
	Resukts folde erklären



2.6

	Erwähnen, das sim Rahmen der Masterarbeit Virusparies erstellt wurde. Betone, dass es im Rahmen der Masterarbeit passierte, weil es einer der Ergebnisse der Masterarbeit ist.
	Erwähnen, dass es in R umgesetzt wurde, anders als VirusHunterGatherer.
	Features nennen: Plots, Subset, Tables, Import,Export.
	Erwähnen, dass alle Plots und Tables damit generiert wurde.
	Erwähne, welcher Cut off genutzt wurde: 1e-5.
	Erwähne, welche Plots generiert wurden, was Sie zeigen und welche Rolle die cutoffs haben. Aber mache es kurz.
	Erwähne, dass es nicht nur Plots, sondern auch gefilterte Hittables und Summary Stats zurückgibt.
	Virusparies setzt E-values, wo E-values mit –log10 geplottet werden auf minimalen Wert 


DATA


	Taubert data: Tabell emit Daten einfügen (vorher vielleicht den leeren Datensatz entfernen 19031.
	Mammals Data
	Florian Pfaff Data
	Anzahl an Daten erwähnen.
	Erwähnen, dass Taubert und Pfaff für smalldna,large dna und RNAvirus liefen, während Mammals nur RNAviruses waren.
	Erwähnen, was lokal und was SRA Daten waren. Datentypen erwähnen (FASTQ).
Mammals data:
du findest die Virushunter Suchergebnisse in Mammals im Anhang und auf dem Linux server unter:
/mnt/twincore/compvironas/share/11_virushunter_RNAvirusUpdate_mammals/

Die Tabelle ist gross und du wirst es vermutlich nicht schaffen alle Treffer mit Virusgatherer zu assemblieren (wie besprochen kannst du beides, Hunter und Gatherer, laufen lassen). Ich schlage auch vor, erstmal zu Filtern, damit eine machbare Anzahl von SRA runs uebrig bleibt, die du dann analysieren kannst. Deshalb nur Treffer einbeziehen, die alle folgenden Kriterien erfuellen:

1) Treffer mit 'best_query' gegen eine bestimmte Virusgruppe (siehe unten)
2) 'num_hits' > 4
3) 'ViralRefSeq_E' < 1e-5
4) 'ViralRefSeq_ident' < 90

Ausserdem hier ein Ranking nach 'best_query' (also der Reihenfolge nach abarbeiten):

1) Flavi_RdRp
2) Hepe-Virga_RdRp
3) Nido_RdRp
4) Negative_Bunya-Arena_RdRp, Negative_Mono-Chu_RdRp, Negative_Orthomyxo_RdRp

[danach die anderen 'best_query' Gruppen falls die Zeit es erlaubt, was ich nicht erwarte]

	Eine Liste an genutzten SRAs für alle Gruppen einfügen. Also eine Spalte für für jeden Run oder eine Observation für jeden Run.
