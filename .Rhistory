result
rm(list = ls())
library(Virusparies)
library(tidyverse)
library(gt)
path <- "data/hittables_taubert/largedna/combined_virushunter.tsv"
out <- "output/mammals/Orthomyxo/plots/rnavirus/Gatherer/"
file <- ImportVirusTable(path)
file <- VhgPreprocessTaxa(file,taxa_rank = "Family")
file_filtered <- VhgSubsetHittable(file,ViralRefSeq_E_criteria = 1e-5)
# Process and count matching subjects
result <- file_filtered %>%
mutate(ViralRefSeq_subject = str_extract(ViralRefSeq_subject, "(?<=\\|).*")) %>%
mutate(ViralRefSeq_subject = str_replace_all(ViralRefSeq_subject, "\\|", "\n")) %>%
group_by(ViralRefSeq_taxonomy, ViralRefSeq_subject) %>%
summarise(subject_count = n(), .groups = 'drop')
remove_identifiers = TRUE
# Process the data based on the remove_identifiers argument
result <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Process and count matching subjects
result <- result %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(subject_count = n(), .groups = 'drop')
# Summing values from the first column for each subject
first_column <- colnames(file)[1]  # Identify the first column in the dataset
if (first_column %in% colnames(file)) {
sum_values <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(sum_first_column = sum(.data[[first_column]], na.rm = TRUE), .groups = 'drop')
# Join the sum values with the result
result <- result %>%
left_join(sum_values, by = c(groupby, "Processed_ViralRefSeq_subject"))
} else {
warning(paste("Column", first_column, "not found in the file. Skipping summation."))
}
rlang::last_trace()
groupby = "ViralRefSeq_taxonomy"
# Summing values from the first column for each subject
first_column <- colnames(file)[1]  # Identify the first column in the dataset
if (first_column %in% colnames(file)) {
sum_values <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(sum_first_column = sum(.data[[first_column]], na.rm = TRUE), .groups = 'drop')
# Join the sum values with the result
result <- result %>%
left_join(sum_values, by = c(groupby, "Processed_ViralRefSeq_subject"))
} else {
warning(paste("Column", first_column, "not found in the file. Skipping summation."))
}
rlang::last_trace()
# Process the data based on the remove_identifiers argument
result <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Process and count matching subjects
result <- result %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(subject_count = n(), .groups = 'drop')
# Summing values from the first column for each subject
first_column <- colnames(file)[1]  # Identify the first column in the dataset
if (first_column %in% colnames(file)) {
sum_values <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(sum_first_column = sum(.data[[first_column]], na.rm = TRUE), .groups = 'drop')
# Join the sum values with the result
result <- result %>%
left_join(sum_values, by = c(groupby, "Processed_ViralRefSeq_subject"))
} else {
warning(paste("Column", first_column, "not found in the file. Skipping summation."))
}
# Process the data based on the remove_identifiers argument
result <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Process and count matching subjects
result <- result %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(subject_count = n(), .groups = 'drop')
# Summing values from the first column for each subject
first_column <- colnames(file)[1]  # Identify the first column in the dataset
if (first_column %in% colnames(file)) {
sum_values <- file %>%
group_by(across(all_of(groupby)), Processed_ViralRefSeq_subject) %>%
summarise(sum_first_column = sum(.data[[first_column]], na.rm = TRUE), .groups = 'drop')
# Join the sum values with the result
result <- result %>%
left_join(sum_values, by = c(groupby, "Processed_ViralRefSeq_subject"))
} else {
warning(paste("Column", first_column, "not found in the file. Skipping summation."))
}
# Process the data based on the remove_identifiers argument
result <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Process and count matching subjects
result <- result %>%
group_by(across(all_of(groupby)), Processed_ViralRefSeq_subject) %>%
summarise(subject_count = n(), .groups = 'drop')
# Summing values from the first column for each subject
first_column <- colnames(file)[1]  # Identify the first column in the dataset
if (first_column %in% colnames(file)) {
sum_values <- file %>%
group_by(across(all_of(groupby)), Processed_ViralRefSeq_subject) %>%
summarise(sum_first_column = sum(.data[[first_column]], na.rm = TRUE), .groups = 'drop')
# Join the sum values with the result
result <- result %>%
left_join(sum_values, by = c(groupby, "Processed_ViralRefSeq_subject"))
} else {
warning(paste("Column", first_column, "not found in the file. Skipping summation."))
}
# Process the data based on the remove_identifiers argument
result <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Process and count matching subjects
result <- result %>%
group_by(across(all_of(groupby)), Processed_ViralRefSeq_subject) %>%
summarise(subject_count = n(), .groups = 'drop')
# Summing values from the first column for each subject
first_column <- colnames(file)[1]  # Identify the first column in the dataset
if (first_column %in% colnames(file)) {
sum_values <- file %>%
group_by(across(all_of(groupby)), Processed_ViralRefSeq_subject) %>%
summarise(sum_first_column = sum(.data[[first_column]], na.rm = TRUE), .groups = 'drop')
# Join the sum values with the result
result <- result %>%
left_join(sum_values, by = c(groupby, "Processed_ViralRefSeq_subject"))
} else {
warning(paste("Column", first_column, "not found in the file. Skipping summation."))
}
rlang::last_trace()
# Process the data based on the remove_identifiers argument
file <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Process and count matching subjects
result <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(subject_count = n(), .groups = 'drop')
# Summing values from the first column for each subject
first_column <- colnames(file)[1]  # Identify the first column in the dataset
if (first_column %in% colnames(file)) {
sum_values <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(sum_first_column = sum(.data[[first_column]], na.rm = TRUE), .groups = 'drop')
# Join the sum values with the result
result <- result %>%
left_join(sum_values, by = c(groupby, "Processed_ViralRefSeq_subject"))
} else {
warning(paste("Column", first_column, "not found in the file. Skipping summation."))
}
rlang::last_trace()
# Identify the first column in the dataset
first_column <- colnames(file)[1]
# Summing values from the first column for each subject and group
sum_values <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(sum_first_column = sum(.data[[first_column]], na.rm = TRUE), .groups = 'drop')
# Process the data based on the remove_identifiers argument
file <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Identify the first column in the dataset
first_column <- colnames(file)[1]
# Group by the specified column and the processed viral subjects, and collect the first column values
result <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
subject_count = n(),
first_column_values = paste(unique(.data[[first_column]]), collapse = ", "),
.groups = 'drop'
)
result
View(result)
View(file_filtered)
View(result)
# Process and count matching subjects
result <- file_filtered %>%
mutate(ViralRefSeq_subject = str_extract(ViralRefSeq_subject, "(?<=\\|).*")) %>%
mutate(ViralRefSeq_subject = str_replace_all(ViralRefSeq_subject, "\\|", "\n")) %>%
group_by(ViralRefSeq_taxonomy, ViralRefSeq_subject) %>%
summarise(subject_count = n(), .groups = 'drop')
result
View(file_filtered)
# Process the data based on the remove_identifiers argument
file <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Identify the first column in the dataset
first_column <- colnames(file)[1]
# Group by the specified column and the processed viral subjects, and collect the first column values
result <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
subject_count = n(),
run_id_values = paste(unique(.data[[first_column]]), collapse = ", "),
.groups = 'drop'
)
result
file <- file_filtered
# Process the data based on the remove_identifiers argument
file <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Identify the first column in the dataset
first_column <- colnames(file)[1]
# Group by the specified column and the processed viral subjects, and collect the first column values
result <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
subject_count = n(),
run_id_values = paste(unique(.data[[first_column]]), collapse = ", "),
.groups = 'drop'
)
result
groupby = "best_query",
groupby = "best_query"
# Process the data based on the remove_identifiers argument
file <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Identify the first column in the dataset
first_column <- colnames(file)[1]
# Group by the specified column and the processed viral subjects, and collect the first column values
result <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
subject_count = n(),
run_id_values = paste(unique(.data[[first_column]]), collapse = ", "),
.groups = 'drop'
)
result
# Process the data based on the remove_identifiers argument
file <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Identify the first column in the dataset
first_column <- colnames(file)[1]
# Group by the specified column and the processed viral subjects
result <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
subject_count = n(),
.groups = 'drop'
)
# Optionally include run_id_values
if (include_run_id_values) {
run_id_values <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
run_id_values = paste(unique(.data[[first_column]]), collapse = ", "),
.groups = 'drop'
)
result <- result %>%
left_join(run_id_values, by = c(groupby, "Processed_ViralRefSeq_subject"))
}
include_run_id_values = TRUE
# Process the data based on the remove_identifiers argument
file <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Identify the first column in the dataset
first_column <- colnames(file)[1]
# Group by the specified column and the processed viral subjects
result <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
subject_count = n(),
.groups = 'drop'
)
# Optionally include run_id_values
if (include_run_id_values) {
run_id_values <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
run_id_values = paste(unique(.data[[first_column]]), collapse = ", "),
.groups = 'drop'
)
result <- result %>%
left_join(run_id_values, by = c(groupby, "Processed_ViralRefSeq_subject"))
}
View(run_id_values)
# Group by the specified column and the processed viral subjects
result <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
subject_count = n(),
.groups = 'drop'
)
# Optionally include run_id_values
if (include_run_id_values) {
run_id_values <- result %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
run_id_values = paste(unique(.data[[first_column]]), collapse = ", "),
.groups = 'drop'
)
result <- result %>%
left_join(run_id_values, by = c(groupby, "Processed_ViralRefSeq_subject"))
}
# Process the data based on the remove_identifiers argument
file <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Identify the first column in the dataset
first_column <- colnames(file)[1]
# Group by the specified column and the processed viral subjects
result <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
subject_count = n(),
.groups = 'drop'
)
# Optionally include run_id_values
if (include_run_id_values) {
run_id_values <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
run_id_values = paste(unique(.data[[first_column]]), collapse = ", "),
.groups = 'drop'
)
result <- result %>%
left_join(run_id_values, by = c(groupby, "Processed_ViralRefSeq_subject"))
}
View(result)
include_run_id_values = FALSE
# Process the data based on the remove_identifiers argument
file <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Identify the first column in the dataset
first_column <- colnames(file)[1]
# Group by the specified column and the processed viral subjects
result <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
subject_count = n(),
.groups = 'drop'
)
# Optionally include run_id_values
if (include_run_id_values) {
run_id_values <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
run_id_values = paste(unique(.data[[first_column]]), collapse = ", "),
.groups = 'drop'
)
result <- result %>%
left_join(run_id_values, by = c(groupby, "Processed_ViralRefSeq_subject"))
}
include_run_id_values = TRUE
# Process the data based on the remove_identifiers argument
file <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Identify the first column in the dataset
first_column <- colnames(file)[1]
# Group by the specified column and the processed viral subjects
result <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
subject_count = n(),
.groups = 'drop'
)
# Optionally include run_id_values
if (include_run_id_values) {
run_id_values <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
run_id_values = paste(unique(.data[[first_column]]), collapse = ", "),
.groups = 'drop'
)
result <- result %>%
left_join(run_id_values, by = c(groupby, "Processed_ViralRefSeq_subject"))
}
include_run_id_values = FALSE
# Process the data based on the remove_identifiers argument
file <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Identify the first column in the dataset
first_column <- colnames(file)[1]
# Group by the specified column and the processed viral subjects
result <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
subject_count = n(),
.groups = 'drop'
)
# Optionally include run_id_values
if (include_run_id_values) {
run_id_values <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
run_id_values = paste(unique(.data[[first_column]]), collapse = ", "),
.groups = 'drop'
)
result <- result %>%
left_join(run_id_values, by = c(groupby, "Processed_ViralRefSeq_subject"))
}
include_run_id_values = TRUE
# Process the data based on the remove_identifiers argument
file <- file %>%
mutate(Processed_ViralRefSeq_subject = if (remove_identifiers) {
str_extract(.data$ViralRefSeq_subject, "(?<=\\|).*")
} else {
.data$ViralRefSeq_subject
})
# Identify the first column in the dataset
first_column <- colnames(file)[1]
# Group by the specified column and the processed viral subjects
result <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
subject_count = n(),
.groups = 'drop'
)
# Optionally include run_id_values
if (include_run_id_values) {
run_id_values <- file %>%
group_by(across(all_of(groupby)), .data$Processed_ViralRefSeq_subject) %>%
summarise(
run_id_values = paste(unique(.data[[first_column]]), collapse = ", "),
.groups = 'drop'
)
result <- result %>%
left_join(run_id_values, by = c(groupby, "Processed_ViralRefSeq_subject"))
}
remove.packages("Virusparies") # remove old version before installing new
library(remotes)
remotes::install_github("SergejRuff/Virusparies")
# --- clean glob. env. --- #
rm(list=ls())
# --- load packages --- #
library(Virusparies)
?`Virusparies-package`
rm(list = ls())
library(Virusparies)
library(tidyverse)
library(gt)
path <- "data/hittables_taubert/smalldna/combined_virusgatherer-cap3.tsv"
out <- "output/TaubertDatacombined/plots/smalldna/Gatherer/"
file <- ImportVirusTable(path)
file <- VhgPreprocessTaxa(file,taxa_rank = "Family")
file_filtered <- VhgSubsetHittable(file,ViralRefSeq_E_criteria = 1e-5)
# Process and count matching subjects
result <- file_filtered %>%
mutate(ViralRefSeq_subject = str_extract(ViralRefSeq_subject, "(?<=\\|).*")) %>%
mutate(ViralRefSeq_subject = str_replace_all(ViralRefSeq_subject, "\\|", "\n")) %>%
group_by(ViralRefSeq_taxonomy, ViralRefSeq_subject) %>%
summarise(subject_count = n(), .groups = 'drop')
gt_table <- VhgTabularRasa(result,title = "Viral Subject",names_ = c("Reference taxonomy","Viral subject"))
result
gt_table <- VhgTabularRasa(result,title = "Viral Subject",names_ = c("Reference taxonomy","Viral subject","counts"))
gt_table
ExportVirusGt(gt_table,filename = "subject.png",path = out,export_gt_obj = TRUE,create.dir = TRUE)
ExportVirusGt(gt_table,filename = "subject.docx",path = out,export_gt_obj = TRUE,create.dir = TRUE)
remove.packages("Virusparies") # remove old version before installing new
library(remotes)
remotes::install_github("SergejRuff/Virusparies")
rm(list = ls())
library(data.table)
