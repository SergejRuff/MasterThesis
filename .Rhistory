library(taxize)
rm(list=ls())
# --- load packages --- #
library(tidyverse)
# --- import data --- #
mammal_raw <-
readxl::read_xlsx("data/RNAvirus_Mammals_newJan2023/excel_with_alldata_unfiltered/RNAviruses-Mammals-RNA-newJan2023.xlsx")
unique(mammal_raw$host_taxon)
unique(mammal_raw$host_taxid)
suppressMessages(tax_name(unique(mammal_raw$host_taxid), get = 'Order', db = 'ncbi',messages = FALSE)$Order)
suppressMessages(tax_name(as.character(unique(mammal_raw$host_taxid)), get = 'Order', db = 'ncbi',messages = FALSE)$Order)
suppressMessages(tax_name(as.character(unique(mammal_raw$host_taxid)[1:10]), get = 'Order', db = 'ncbi',messages = FALSE)$Order)
install.packages("taxa")
(ncbi <- taxon_database(
name = "ncbi",
url = "http://www.ncbi.nlm.nih.gov/taxonomy",
description = "NCBI Taxonomy Database",
id_regex = "*"
))
library(taxa)
(ncbi <- taxon_database(
name = "ncbi",
url = "http://www.ncbi.nlm.nih.gov/taxonomy",
description = "NCBI Taxonomy Database",
id_regex = "*"
))
?taxon_database
# Install and load necessary packages
install.packages("data.table")
library(data.table)
# Define the directory path
dir_path <- "/home/sergej/Downloads/new_taxdump (2)"
# List all .dmp files in the directory
file_list <- list.files(path = dir_path, pattern = "\\.dmp$", full.names = TRUE)
# Initialize an empty list to store the data
dmp_data_list <- list()
# Loop through each file and read it into R
for (file in file_list) {
# Extract the base name of the file to use as the list element name
file_name <- basename(file)
file_name <- sub("\\.dmp$", "", file_name)
# Read the file and store it in the list
dmp_data_list[[file_name]] <- fread(file)
}
# Optionally, inspect the imported data
names(dmp_data_list)  # List the names of the imported datasets
head(dmp_data_list[[1]])  # Inspect the first few rows of the first dataset
install.packages("data.table")
# Define the directory path
dir_path <- "/home/sergej/Downloads/new_taxdump (2)"
# List all .dmp files in the directory
file_list <- list.files(path = dir_path, pattern = "\\.dmp$", full.names = TRUE)
# Initialize an empty list to store the data
dmp_data_list <- list()
for (file in file_list) {
# Extract the base name of the file to use as the list element name
file_name <- basename(file)
file_name <- sub("\\.dmp$", "", file_name)
# Read the file and store it in the list
dmp_data_list[[file_name]] <- fread(file)
}
# Loop through each file and read it into R with adjusted parameters
for (file in file_list) {
# Extract the base name of the file to use as the list element name
file_name <- basename(file)
file_name <- sub("\\.dmp$", "", file_name)
# Read the file and store it in the list
dmp_data_list[[file_name]] <- fread(file, fill = TRUE, quote = "", comment.char = "")
}
# Loop through each file and read it into R with adjusted parameters
for (file in file_list) {
# Extract the base name of the file to use as the list element name
file_name <- basename(file)
file_name <- sub("\\.dmp$", "", file_name)
# Read the file and store it in the list
dmp_data_list[[file_name]] <- fread(file, fill = TRUE, quote = "")
}
View(dmp_data_list)
dmp_data_list[["citations"]]
names_file <- "/home/sergej/Downloads/new_taxdump (2)/names.dmp"
nodes_file <- "/home/sergej/Downloads/new_taxdump (2)/nodes.dmp"
# Read the names and nodes files
names_data <- fread(names_file, fill = TRUE, quote = "", comment.char = "", sep = "|", strip.white = TRUE)
names_file <- "/home/sergej/Downloads/new_taxdump (2)/names.dmp"
nodes_file <- "/home/sergej/Downloads/new_taxdump (2)/nodes.dmp"
# Read the names and nodes files
names_data <- fread(names_file, fill = TRUE, quote = "", sep = "|", strip.white = TRUE)
nodes_data <- fread(nodes_file, fill = TRUE, quote = "", sep = "|", strip.white = TRUE)
# Inspect the data structures
head(names_data)
head(nodes_data)
View(names_data)
names_data <- names_data[, .(tax_id = V1, name_txt = V2, unique_name = V3, name_class = V7)]
View(nodes_data)
library(rentrez)
# Define a function to get taxonomic data for a given taxon ID
get_taxonomic_data <- function(taxon_id) {
taxon_info <- entrez_summary(db = "taxonomy", id = taxon_id)
return(taxon_info)
}
# Example taxon IDs for a few species
taxon_ids <- c("9606", "10090", "7227")  # Human, Mouse, Fruit fly
# Get taxonomic data for each taxon ID
taxonomic_data <- lapply(taxon_ids, get_taxonomic_data)
# Inspect the taxonomic data
taxonomic_data
# Function to extract species, class, and order from taxonomic data
extract_taxonomy_info <- function(taxon_info) {
taxon_lineage <- taxon_info$lineage
species <- taxon_info$scientificname
class <- NA
order <- NA
if ("class" %in% names(taxon_lineage)) {
class <- taxon_lineage[["class"]]
}
if ("order" %in% names(taxon_lineage)) {
order <- taxon_lineage[["order"]]
}
return(list(species = species, class = class, order = order))
}
# Extract taxonomy info for each taxon
taxonomy_list <- lapply(taxonomic_data, extract_taxonomy_info)
# Convert the list to a data frame
taxonomy_df <- do.call(rbind, lapply(taxonomy_list, as.data.frame))
# Inspect the resulting data frame
print(taxonomy_df)
View(taxonomic_data)
taxonomic_data[[1]]
# Function to retrieve all taxonomy IDs
get_all_taxon_ids <- function() {
# Initial search to get the count of all records
search_results <- entrez_search(db = "taxonomy", term = "all[filter]", retmax = 0)
count <- search_results$count
# Retrieve all IDs in chunks
all_taxon_ids <- c()
batch_size <- 10000  # Adjust batch size as needed
for (start in seq(0, count, by = batch_size)) {
search_results <- entrez_search(db = "taxonomy", term = "all[filter]", retstart = start, retmax = batch_size)
all_taxon_ids <- c(all_taxon_ids, search_results$ids)
Sys.sleep(1)  # To comply with NCBI rate limits
}
return(all_taxon_ids)
}
# Retrieve all taxonomy IDs
all_taxon_ids <- get_all_taxon_ids()
library(Virusparies)
?VhgBoxplot
str(vg_file)
library(tibble)
glimpse(vg_file)
test <- glimpse(vg_file)
library(gt)
test %>% gt()
glimpse(vg_file) %>% gt()
test <- glimpse(vg_file)
summarize_df <- function(df) {
summary <- df %>%
glimpse() %>%
capture.output() %>%
data.frame(text = ., stringsAsFactors = FALSE)
summary %>%
gt() %>%
tab_header(
title = "Data Frame Summary",
subtitle = paste("Rows:", nrow(df), "Columns:", ncol(df))
) %>%
cols_label(text = "")
}
summarize_df(vg_file)
skim(vg_file)
install.packages("skimr")
library(skimr)
skim(vg_file)
install.packages("summarytools")
vg_file %>% as.tibble() %>% head(5)
vg_file %>% as_tibble() %>% head(5)
vg_file %>% as_tibble() %>% head(5) %>% t()
transpose_head <- function(df, n = 5) {
df %>%
as_tibble() %>%
head(n) %>%
t() %>%
as_tibble(rownames = "Variable")
}
transpose_head(vg_file)
vg_file %>% as_tibble() %>% str()
vg_file %>% as_tibble() %>% glimpse()
vg_file %>% as_tibble() %>% glimpse() -> test
test <- capture.output(vg_file %>% as_tibble() %>% glimpse())
cat(test, sep = "\n")#
test
cat(test, sep = "\n") %>% gt()
test %>% gt()
glimpse(vg_test) %>% gt()
glimpse(vg_file) %>% gt()
generate_summary <- function(df, num_values = 5) {
# Create an empty list to store the summary
summary_list <- list()
# Loop through each column in the data frame
for (col_name in names(df)) {
# Get the column data
col_data <- df[[col_name]]
# Determine the column type
col_type <- class(col_data)
# Get the first few values
if (length(col_data) > num_values) {
col_values <- paste(head(col_data, num_values), collapse = ", ")
} else {
col_values <- paste(col_data, collapse = ", ")
}
# Create a summary string for the column
summary_str <- paste0("$ ", col_name, " <",
col_type, "> ", col_values, ifelse(length(col_data) > num_values, "â€¦", ""))
# Add the summary string to the list
summary_list[[col_name]] <- summary_str
}
# Print the summary list
for (col_summary in summary_list) {
cat(col_summary, "\n")
}
}
generate_summary(vg_file)
generate_summary(vg_file) %>% gt()
summary(vg_file)
glimpse(vg_file)
get_examples <- function(column) {
if (is.factor(column) || is.character(column)) {
return(paste0(head(column, 3), collapse = ", "))
} else if (is.numeric(column) || is.integer(column)) {
return(paste0(round(head(column, 3), 2), collapse = ", "))
} else {
return(paste0(head(column, 3), collapse = ", "))
}
}
# Create a data frame with column names, data types, and example values
column_info <- data.frame(
Column_Name = names(vg_file),
Data_Type = sapply(vg_file, class),
Examples = sapply(vg_file, get_examples),
stringsAsFactors = FALSE
)
# Create the gt table
gt_table <- column_info %>%
gt() %>%
tab_header(
title = "Column Overview"
) %>%
cols_label(
Column_Name = "Column Name",
Data_Type = "Data Type",
Examples = "Example Values"
) %>%
fmt_markdown(
columns = vars(Examples)
)
# Print the gt table
print(gt_table)
column_info
head(vg_file$ViralRefSeq_E)
# Create a data frame with column names, data types, and example values
column_info <- data.frame(
Column_Name = names(vg_file),
Data_Type = sapply(vg_file, class),
Examples = sapply(vg_file, get_examples),
stringsAsFactors = FALSE
)
# Create the gt table
gt_table <- column_info %>%
gt() %>%
tab_header(
title = "Column Overview"
) %>%
cols_label(
Column_Name = "Column Name",
Data_Type = "Data Type",
Examples = "Example Values"
) %>%
fmt_markdown(
columns = vars(Examples)
)
# Print the gt table
print(gt_table)
# Create a data frame with column names, data types, and example values
column_info <- data.frame(
Column_Name = names(vg_file),
Data_Type = sapply(vg_file, class),
Examples = sapply(vg_file, get_examples),
stringsAsFactors = FALSE
)
# Create the gt table
gt_table <- column_info %>%
gt() %>%
tab_header(
title = "Column Overview"
) %>%
cols_label(
Column_Name = "Column Name",
Data_Type = "Data Type",
Examples = "Example Values"
) %>%
fmt_markdown(
columns = c(Examples)
)
# Print the gt table
print(gt_table)
# Function to get example values
get_examples <- function(column) {
if (is.factor(column) || is.character(column)) {
return(paste0(head(column, 3), collapse = ", "))
} else if (is.numeric(column) || is.integer(column)) {
# Use scientific notation format if necessary
formatted <- formatC(head(column, 3), format = "e", digits = 2)
return(paste0(formatted, collapse = ", "))
} else {
return(paste0(head(column, 3), collapse = ", "))
}
}
# Create a data frame with column names, data types, and example values
column_info <- data.frame(
Column_Name = names(vg_file),
Data_Type = sapply(vg_file, function(col) {
class(col) %>%
gsub("character", "chr", .) %>%
gsub("numeric", "dbl", .) %>%
gsub("integer", "int", .) %>%
gsub("factor", "fct", .) %>%
gsub("Date", "date", .)
}),
Examples = sapply(vg_file, get_examples),
stringsAsFactors = FALSE
)
# Create the gt table
gt_table <- column_info %>%
gt() %>%
tab_header(
title = "Column Overview"
) %>%
cols_label(
Column_Name = "Column Name",
Data_Type = "Data Type",
Examples = "Example Values"
) %>%
fmt_markdown(
columns = c(Examples)
) %>%
cols_align(
align = "left",
columns = c(Column_Name, Data_Type, Examples)
) %>%
fmt_number(
columns = c(Examples),
decimals = 2
)
# Print the gt table
print(gt_table)
