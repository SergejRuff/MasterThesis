filepath <- "data/RNAvirus_Mammals_newJan2023/excel_with_alldata_unfiltered/RNAviruses-Mammals-RNA-newJan2023.tsv"
file <- ImportVirusTable(filepath)
VhgPreprocessTaxa2(file, taxa_rank = "Family")
# Load necessary packages
library(dplyr)
library(stringr)
library(parallel)
# Define the main function
VhgPreprocessTaxa2 <- function(file, taxa_rank, n_cores = detectCores()) {
# Check if the input file is a data frame
if (!is.data.frame(file)) {
stop("The 'file' argument must be a data frame.")
}
# Ensure the file has rows
num_rows <- nrow(file)
if (is.null(num_rows) || num_rows <= 0) {
stop("The data frame 'file' has no rows.")
}
# Prepare data
taxa_rank <- taxonomy_rank_hierarchy(taxa_rank)
ictv_formatted <- format_ICTV(taxa_rank)
taxon_filter <- paste(unique(ictv_formatted$name), collapse = "|")
# Define helper functions
preprocess_chunk <- function(chunk) {
chunk %>%
mutate(
ViralRefSeq_taxonomy = str_remove_all(ViralRefSeq_taxonomy, "taxid:\\d+\\||\\w+\\s\\w+\\|"),
name = str_extract(ViralRefSeq_taxonomy, taxon_filter),
ViralRefSeq_taxonomy = str_extract(ViralRefSeq_taxonomy, paste0("\\w+", taxa_rank))
) %>%
left_join(ictv_formatted, by = "name") %>%
mutate(
ViralRefSeq_taxonomy = case_when(
is.na(ViralRefSeq_taxonomy) & is.na(.data$Phylum) ~ "unclassified",
is.na(ViralRefSeq_taxonomy) ~ paste("unclassified", .data$Phylum),
.default = ViralRefSeq_taxonomy
)
) %>%
select(-c(name:level)) %>%
mutate(
ViralRefSeq_taxonomy = if_else(ViralRefSeq_taxonomy == "unclassified unclassified", "unclassified", ViralRefSeq_taxonomy),
ViralRefSeq_taxonomy = if_else(ViralRefSeq_taxonomy == "unclassified NA", "unclassified", ViralRefSeq_taxonomy)
)
}
# Split data into chunks for parallel processing
file_chunks <- split(file, cut(seq_len(num_rows), n_cores, labels = FALSE))
# Set up parallel processing
cl <- makeCluster(n_cores)
# Export necessary objects and functions to the cluster
clusterExport(cl, list("preprocess_chunk", "ictv_formatted", "taxon_filter", "taxa_rank"))
# Load necessary libraries on each cluster node
clusterEvalQ(cl, {
library(dplyr)
library(stringr)
})
# Process chunks in parallel
processed_chunks <- parLapply(cl, file_chunks, preprocess_chunk)
# Stop the cluster
stopCluster(cl)
# Combine results
final_result <- bind_rows(processed_chunks)
return(final_result)
}
VhgPreprocessTaxa2(file, taxa_rank = "Family")
# Load necessary packages
library(dplyr)
library(stringr)
library(parallel)
# Define the main preprocessing function
VhgPreprocessTaxa2 <- function(file, taxa_rank, n_cores = detectCores()) {
# Ensure the file is a data frame and has rows
if (!is.data.frame(file)) {
stop("The 'file' argument must be a data frame.")
}
num_rows <- nrow(file)
if (num_rows <= 0) {
stop("The data frame 'file' has no rows.")
}
# Prepare data
taxa_rank <- taxonomy_rank_hierarchy(taxa_rank)
ictv_formatted <- format_ICTV(taxa_rank)
taxon_filter <- paste(unique(ictv_formatted$name), collapse = "|")
# Define preprocessing function for chunks
preprocess_chunk <- function(chunk) {
chunk %>%
mutate(
ViralRefSeq_taxonomy = str_remove_all(ViralRefSeq_taxonomy, "taxid:\\d+\\||\\w+\\s\\w+\\|"),
name = str_extract(ViralRefSeq_taxonomy, taxon_filter),
ViralRefSeq_taxonomy = str_extract(ViralRefSeq_taxonomy, paste0("\\w+", taxa_rank))
) %>%
left_join(ictv_formatted, by = "name") %>%
mutate(
ViralRefSeq_taxonomy = case_when(
is.na(ViralRefSeq_taxonomy) & is.na(.data$Phylum) ~ "unclassified",
is.na(ViralRefSeq_taxonomy) ~ paste("unclassified", .data$Phylum),
.default = ViralRefSeq_taxonomy
)
) %>% select(-c(name:level)) %>%
mutate(
ViralRefSeq_taxonomy = if_else(ViralRefSeq_taxonomy == "unclassified unclassified", "unclassified", ViralRefSeq_taxonomy),
ViralRefSeq_taxonomy = if_else(ViralRefSeq_taxonomy == "unclassified NA", "unclassified", ViralRefSeq_taxonomy)
)
}
# Split the file into chunks for parallel processing
file_chunks <- split(file, cut(seq_len(nrow(file)), n_cores, labels = FALSE))
# Set up parallel processing
cl <- makeCluster(n_cores)
clusterExport(cl, c("preprocess_chunk", "ictv_formatted", "taxon_filter", "taxa_rank"))
clusterEvalQ(cl, {
library(dplyr)
library(stringr)
})
# Process chunks in parallel
processed_chunks <- parLapply(cl, file_chunks, preprocess_chunk)
# Stop the cluster
stopCluster(cl)
# Combine the results
final_result <- bind_rows(processed_chunks)
return(final_result)
}
VhgPreprocessTaxa2(file, taxa_rank = "Family")
# Load necessary packages
library(dplyr)
library(stringr)
library(parallel)
# Define the preprocessing function
preprocess_chunk <- function(chunk, ictv_formatted, taxon_filter, taxa_rank) {
chunk %>%
mutate(
ViralRefSeq_taxonomy = str_remove_all(ViralRefSeq_taxonomy, "taxid:\\d+\\||\\w+\\s\\w+\\|"),
name = str_extract(ViralRefSeq_taxonomy, taxon_filter),
ViralRefSeq_taxonomy = str_extract(ViralRefSeq_taxonomy, paste0("\\w+", taxa_rank))
) %>%
left_join(ictv_formatted, by = "name") %>%
mutate(
ViralRefSeq_taxonomy = case_when(
is.na(ViralRefSeq_taxonomy) & is.na(.data$Phylum) ~ "unclassified",
is.na(ViralRefSeq_taxonomy) ~ paste("unclassified", .data$Phylum),
.default = ViralRefSeq_taxonomy
)
) %>% select(-c(name:level)) %>%
mutate(
ViralRefSeq_taxonomy = if_else(ViralRefSeq_taxonomy == "unclassified unclassified", "unclassified", ViralRefSeq_taxonomy),
ViralRefSeq_taxonomy = if_else(ViralRefSeq_taxonomy == "unclassified NA", "unclassified", ViralRefSeq_taxonomy)
)
}
# Main function with parallel processing
VhgPreprocessTaxa2 <- function(file, taxa_rank, n_cores = detectCores()) {
# Ensure the file is a data frame and has rows
if (!is.data.frame(file)) {
stop("The 'file' argument must be a data frame.")
}
num_rows <- nrow(file)
if (num_rows <= 0) {
stop("The data frame 'file' has no rows.")
}
# Prepare data
taxa_rank <- taxonomy_rank_hierarchy(taxa_rank)
ictv_formatted <- format_ICTV(taxa_rank)
taxon_filter <- paste(unique(ictv_formatted$name), collapse = "|")
# Split data into chunks for parallel processing
file_chunks <- split(file, cut(seq_len(nrow(file)), n_cores, labels = FALSE))
# Set up parallel processing
cl <- makeCluster(n_cores)
# Export necessary objects and functions to the cluster
clusterExport(cl, c("preprocess_chunk", "ictv_formatted", "taxon_filter", "taxa_rank"))
# Load necessary libraries on each cluster node
clusterEvalQ(cl, {
library(dplyr)
library(stringr)
})
# Process chunks in parallel
processed_chunks <- parLapply(cl, file_chunks, function(chunk) {
preprocess_chunk(chunk, ictv_formatted, taxon_filter, taxa_rank)
})
# Stop the cluster
stopCluster(cl)
# Combine the results
final_result <- bind_rows(processed_chunks)
return(final_result)
}
VhgPreprocessTaxa2(file, taxa_rank = "Family")
process_chunk <- function(chunk, ictv_formatted, taxa_rank) {
taxon_filter <- paste(unique(ictv_formatted$name), collapse = "|")
chunk_processed <- chunk %>%
mutate(
ViralRefSeq_taxonomy = str_remove_all(ViralRefSeq_taxonomy, "taxid:\\d+\\||\\w+\\s\\w+\\|"),
name = str_extract(ViralRefSeq_taxonomy, taxon_filter),
ViralRefSeq_taxonomy = str_extract(ViralRefSeq_taxonomy, paste0("\\w+", taxa_rank))
) %>%
left_join(ictv_formatted, join_by("name" == "name")) %>%
mutate(
ViralRefSeq_taxonomy = case_when(
is.na(ViralRefSeq_taxonomy) & is.na(.data$Phylum) ~ "unclassified",
is.na(ViralRefSeq_taxonomy) ~ paste("unclassified", .data$Phylum),
.default = ViralRefSeq_taxonomy
)
) %>% select(-c(name:level)) %>%
mutate(
ViralRefSeq_taxonomy = if_else(ViralRefSeq_taxonomy == "unclassified unclassified", "unclassified", ViralRefSeq_taxonomy),
ViralRefSeq_taxonomy = if_else(ViralRefSeq_taxonomy == "unclassified NA", "unclassified", ViralRefSeq_taxonomy)
)
return(chunk_processed)
}
VhgPreprocessTaxa2 <- function(file, taxa_rank) {
taxa_rank <- taxonomy_rank_hierarchy(taxa_rank)
ictv_formatted <- format_ICTV(taxa_rank)
# Define the number of cores
num_cores <- detectCores() - 1 # Leave one core for the OS
# Split the data into chunks
num_chunks <- num_cores
chunks <- split(file, rep(1:num_chunks, length.out = nrow(file)))
# Process chunks in parallel
processed_chunks <- mclapply(chunks, process_chunk, ictv_formatted = ictv_formatted, taxa_rank = taxa_rank, mc.cores = num_cores)
# Combine processed chunks
file_processed <- bind_rows(processed_chunks)
return(file_processed)
}
VhgPreprocessTaxa2(file, taxa_rank = "Family")
profvis::profvis(VhgPreprocessTaxa2(file, taxa_rank = "Family"))
profvis::profvis(VhgPreprocessTaxa(file, taxa_rank = "Family"))
# Load necessary packages
library(dplyr)
library(stringr)
library(parallel)
# Define the function to process each chunk
process_chunk <- function(chunk, ictv_formatted, taxa_rank) {
taxon_filter <- paste(unique(ictv_formatted$name), collapse = "|")
chunk_processed <- chunk %>%
mutate(
ViralRefSeq_taxonomy = str_remove_all(ViralRefSeq_taxonomy, "taxid:\\d+\\||\\w+\\s\\w+\\|"),
name = str_extract(ViralRefSeq_taxonomy, taxon_filter),
ViralRefSeq_taxonomy = str_extract(ViralRefSeq_taxonomy, paste0("\\w+", taxa_rank))
) %>%
left_join(ictv_formatted, join_by("name" == "name")) %>%
mutate(
ViralRefSeq_taxonomy = case_when(
is.na(ViralRefSeq_taxonomy) & is.na(.data$Phylum) ~ "unclassified",
is.na(ViralRefSeq_taxonomy) ~ paste("unclassified", .data$Phylum),
.default = ViralRefSeq_taxonomy
)
) %>% select(-c(name:level)) %>%
mutate(
ViralRefSeq_taxonomy = if_else(ViralRefSeq_taxonomy == "unclassified unclassified", "unclassified", ViralRefSeq_taxonomy),
ViralRefSeq_taxonomy = if_else(ViralRefSeq_taxonomy == "unclassified NA", "unclassified", ViralRefSeq_taxonomy)
)
return(chunk_processed)
}
# Define the main function
VhgPreprocessTaxa2 <- function(file, taxa_rank, num_cores = 1) {
taxa_rank <- taxonomy_rank_hierarchy(taxa_rank)
ictv_formatted <- format_ICTV(taxa_rank)
# Validate num_cores
if (num_cores < 1) {
stop("Number of cores must be at least 1")
}
# Use default number of cores if specified is greater than available
num_cores <- min(num_cores, detectCores() - 1)
# Split the data into chunks
num_chunks <- num_cores
chunks <- split(file, rep(1:num_chunks, length.out = nrow(file)))
# Process chunks in parallel
processed_chunks <- mclapply(chunks, process_chunk, ictv_formatted = ictv_formatted, taxa_rank = taxa_rank, mc.cores = num_cores)
# Combine processed chunks
file_processed <- bind_rows(processed_chunks)
return(file_processed)
}
VhgPreprocessTaxa2(file, taxa_rank = "Family")
VhgPreprocessTaxa2(file, taxa_rank = "Family",num_cores = 4)
test <- VhgPreprocessTaxa2(file, taxa_rank = "Family",num_cores = 4)
results <- microbenchmark(
SingleThreaded = VhgPreprocessTaxa(file, taxa_rank = "Family"),
Parallel4Cores = VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = 4),
times = 10
)
library(microbenchmark)
results <- microbenchmark(
SingleThreaded = VhgPreprocessTaxa(file, taxa_rank = "Family"),
Parallel4Cores = VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = 4),
times = 10
)
?microbenchmark
results <- microbenchmark(
SingleThreaded = VhgPreprocessTaxa(file, taxa_rank = "Family"),
Parallel4Cores = VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = 4),
times = 10
)
bench::mark(SingleThreaded = VhgPreprocessTaxa(file, taxa_rank = "Family"),
Parallel4Cores = VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = 4))
bench::mark(SingleThreaded = VhgPreprocessTaxa(file, taxa_rank = "Family"),
Parallel4Cores = VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = 4),memory = FALSE)
bench::mark(
Parallel4Cores = VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = 4),memory = FALSE)
bench::mark(
SingleThreaded = VhgPreprocessTaxa(file, taxa_rank = "Family"))
bench::mark(
Parallel4Cores = VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = 7),memory = FALSE)
bench::mark(
Parallel4Cores = VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = 6),memory = FALSE)
bench::mark(
Parallel4Cores = VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = 6),memory = FALSE)
print("\n")
cat("\n")
cat("\r")
print("\r")
print(paste("\n cores:",i,"\n"))
i=1
print(paste("\n cores:",i,"\n"))
print(paste("\n cores:", i, "\n"))
cat("\n cores:", i, "\n")
for (i in 1:7){
cat("\n cores:", i, "\n")
bench::mark(
Parallel4Cores = VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = i),memory = FALSE)
}
# Load necessary packages
library(dplyr)
library(stringr)
library(parallel)
# Define the function to process each chunk
process_chunk <- function(chunk, ictv_formatted, taxa_rank) {
taxon_filter <- paste(unique(ictv_formatted$name), collapse = "|")
chunk_processed <- chunk %>%
mutate(
ViralRefSeq_taxonomy = str_remove_all(ViralRefSeq_taxonomy, "taxid:\\d+\\||\\w+\\s\\w+\\|"),
name = str_extract(ViralRefSeq_taxonomy, taxon_filter),
ViralRefSeq_taxonomy = str_extract(ViralRefSeq_taxonomy, paste0("\\w+", taxa_rank))
) %>%
left_join(ictv_formatted, join_by("name" == "name")) %>%
mutate(
ViralRefSeq_taxonomy = case_when(
is.na(ViralRefSeq_taxonomy) & is.na(.data$Phylum) ~ "unclassified",
is.na(ViralRefSeq_taxonomy) ~ paste("unclassified", .data$Phylum),
.default = ViralRefSeq_taxonomy
)
) %>% select(-c(name:level)) %>%
mutate(
ViralRefSeq_taxonomy = if_else(ViralRefSeq_taxonomy == "unclassified unclassified", "unclassified", ViralRefSeq_taxonomy),
ViralRefSeq_taxonomy = if_else(ViralRefSeq_taxonomy == "unclassified NA", "unclassified", ViralRefSeq_taxonomy)
)
return(chunk_processed)
}
# Define the main function
VhgPreprocessTaxa2 <- function(file, taxa_rank, num_cores = 1) {
taxa_rank <- taxonomy_rank_hierarchy(taxa_rank)
ictv_formatted <- format_ICTV(taxa_rank)
# Validate num_cores
if (num_cores < 1) {
stop("Number of cores must be at least 1")
}
# Use default number of cores if specified is greater than available
num_cores <- min(num_cores, detectCores() - 1)
# Split the data into chunks
num_chunks <- num_cores
chunks <- split(file, rep(1:num_chunks, length.out = nrow(file)))
# Process chunks in parallel
processed_chunks <- mclapply(chunks, process_chunk, ictv_formatted = ictv_formatted, taxa_rank = taxa_rank, mc.cores = num_cores)
# Combine processed chunks
file_processed <- bind_rows(processed_chunks)
return(file_processed)
}
rm(list = ls())
library(data.table)
library(readxl)
library(Virusparies)
library(profvis)
library(tidyverse)
library(microbenchmark)
ICTV_data <- read_excel("data/RNAvirus_Mammals_newJan2023/excel_with_alldata_unfiltered/ICTV_data/ICTV_Master_Species_List_2023_MSL39.v2.xlsx",sheet = 2)
#' pivort ICVT Data
#'
#' @param taxa_rank taxa_rank
#'
#' @return pivotted ICTV_data
#'
#' @importFrom tidyr pivot_longer
#' @noRd
format_ICTV <- function(taxa_rank){
return(ICTV_data %>%
select(.data$Phylum:.data$Subgenus) %>%
pivot_longer(.data$Subphylum:.data$Subgenus, names_to = "level", values_to = "name") %>%
filter(str_detect(.data$name, paste0("\\w+", taxa_rank), negate = TRUE)) %>%
na.omit() %>%
distinct())
}
#' define taxa string
#'
#' @param taxa_rank a character indicating the taxa rank
#'
#' @return a character with the taxa suffix
#'
#' @noRd
taxonomy_rank_hierarchy <- function(taxa_rank) {
# Define the list with values
taxa_list <- list(
"viricotina",
"viricetes",
"viricetidae",
"virales",
"virineae",
"viridae",
"virinae",
"virus"
)
# Define the names for each element
taxa_names <- c(
"Subphylum",
"Class",
"Subclass",
"Order",
"Suborder",
"Family",
"Subfamily",
"Genus"
)
# Assign names to the list elements using setNames()
taxa_list <- setNames(taxa_list, taxa_names)
valid_ranks <- names(taxa_list)
if (!(taxa_rank %in% valid_ranks)) {
stop("Error: Invalid taxa rank provided. Please provide one of: Subphylum, Class, Subclass, Order, Suborder, Family, Subfamily, Genus")
}
return(taxa_list[[taxa_rank]])
}
filepath <- "data/RNAvirus_Mammals_newJan2023/excel_with_alldata_unfiltered/test.tsv"
file <- ImportVirusTable(filepath)
results <- microbenchmark(
SingleThreaded = VhgPreprocessTaxa(file, taxa_rank = "Family"),
Parallel4Cores = VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = 4),
times = 10
)
for (i in 1:7){
cat("\n cores:", i, "\n")
bench::mark(
Parallel4Cores = VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = i),memory = FALSE)
}
# Load necessary packages
library(dplyr)
library(stringr)
library(parallel)
# Define the function to process each chunk
process_chunk <- function(chunk, ictv_formatted, taxa_rank) {
taxon_filter <- paste(unique(ictv_formatted$name), collapse = "|")
chunk_processed <- chunk %>%
mutate(
ViralRefSeq_taxonomy = str_remove_all(ViralRefSeq_taxonomy, "taxid:\\d+\\||\\w+\\s\\w+\\|"),
name = str_extract(ViralRefSeq_taxonomy, taxon_filter),
ViralRefSeq_taxonomy = str_extract(ViralRefSeq_taxonomy, paste0("\\w+", taxa_rank))
) %>%
left_join(ictv_formatted, join_by("name" == "name")) %>%
mutate(
ViralRefSeq_taxonomy = case_when(
is.na(ViralRefSeq_taxonomy) & is.na(.data$Phylum) ~ "unclassified",
is.na(ViralRefSeq_taxonomy) ~ paste("unclassified", .data$Phylum),
.default = ViralRefSeq_taxonomy
)
) %>% select(-c(name:level)) %>%
mutate(
ViralRefSeq_taxonomy = if_else(ViralRefSeq_taxonomy == "unclassified unclassified", "unclassified", ViralRefSeq_taxonomy),
ViralRefSeq_taxonomy = if_else(ViralRefSeq_taxonomy == "unclassified NA", "unclassified", ViralRefSeq_taxonomy)
)
return(chunk_processed)
}
# Define the main function
VhgPreprocessTaxa2 <- function(file, taxa_rank, num_cores = 1) {
taxa_rank <- taxonomy_rank_hierarchy(taxa_rank)
ictv_formatted <- format_ICTV(taxa_rank)
# Validate num_cores
if (num_cores < 1) {
stop("Number of cores must be at least 1")
}
# Use default number of cores if specified is greater than available
num_cores <- min(num_cores, detectCores() - 1)
# Split the data into chunks
num_chunks <- num_cores
chunks <- split(file, rep(1:num_chunks, length.out = nrow(file)))
# Process chunks in parallel
processed_chunks <- mclapply(chunks, process_chunk, ictv_formatted = ictv_formatted, taxa_rank = taxa_rank, mc.cores = num_cores)
# Combine processed chunks
file_processed <- bind_rows(processed_chunks)
return(file_processed)
}
for (i in 1:7){
cat("\n cores:", i, "\n")
bench::mark(
Parallel4Cores = VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = i),memory = FALSE)
}
for (i in 1:7){
cat("\n cores:", i, "\n")
res <-bench::mark(
Parallel4Cores = VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = i),memory = FALSE)
print(res)
}
i= 7
VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = i)
filepath <- "data/RNAvirus_Mammals_newJan2023/excel_with_alldata_unfiltered/RNAviruses-Mammals-RNA-newJan2023.tsv"
for (i in 1:7){
cat("\n cores:", i, "\n")
res <-bench::mark(
Parallel4Cores = VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = i),memory = FALSE)
print(res)
}
filepath <- "data/RNAvirus_Mammals_newJan2023/excel_with_alldata_unfiltered/RNAviruses-Mammals-RNA-newJan2023.tsv"
profvis::profvis(VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = 7))
filepath <- "data/RNAvirus_Mammals_newJan2023/excel_with_alldata_unfiltered/RNAviruses-Mammals-RNA-newJan2023.tsv"
file <- ImportVirusTable(filepath)
profvis::profvis(VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = 7))
for (i in 1:7){
cat("\n cores:", i, "\n")
res <-bench::mark(
Parallel4Cores = VhgPreprocessTaxa2(file, taxa_rank = "Family", num_cores = i),memory = FALSE)
print(res)
}
